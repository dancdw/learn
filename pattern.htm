<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8"><style>body {
  width: 45em;
  border: 1px solid #ddd;
  outline: 1300px solid #fff;
  margin: 16px auto;
}

body .markdown-body
{
  padding: 30px;
}

@font-face {
  font-family: fontawesome-mini;
  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');
}

@font-face {
  font-family: octicons-anchor;
  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');
}

.markdown-body {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  color: #333333;
  overflow: hidden;
  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif;
  font-size: 16px;
  line-height: 1.6;
  word-wrap: break-word;
}

.markdown-body a {
  background: transparent;
}

.markdown-body a:active,
.markdown-body a:hover {
  outline: 0;
}

.markdown-body b,
.markdown-body strong {
  font-weight: bold;
}

.markdown-body mark {
  background: #ff0;
  color: #000;
  font-style: italic;
  font-weight: bold;
}

.markdown-body sub,
.markdown-body sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
.markdown-body sup {
  top: -0.5em;
}
.markdown-body sub {
  bottom: -0.25em;
}

.markdown-body h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

.markdown-body img {
  border: 0;
}

.markdown-body hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

.markdown-body pre {
  overflow: auto;
}

.markdown-body code,
.markdown-body kbd,
.markdown-body pre,
.markdown-body samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

.markdown-body input {
  color: inherit;
  font: inherit;
  margin: 0;
}

.markdown-body html input[disabled] {
  cursor: default;
}

.markdown-body input {
  line-height: normal;
}

.markdown-body input[type="checkbox"] {
  box-sizing: border-box;
  padding: 0;
}

.markdown-body table {
  border-collapse: collapse;
  border-spacing: 0;
}

.markdown-body td,
.markdown-body th {
  padding: 0;
}

.markdown-body .codehilitetable {
  border: 0;
  border-spacing: 0;
}

.markdown-body .codehilitetable tr {
  border: 0;
}

.markdown-body .codehilitetable pre,
.markdown-body .codehilitetable div.codehilite {
  margin: 0;
}

.markdown-body .linenos,
.markdown-body .code,
.markdown-body .codehilitetable td {
  border: 0;
  padding: 0;
}

.markdown-body td:not(.linenos) .linenodiv {
  padding: 0 !important;
}

.markdown-body .code {
  width: 100%;
}

.markdown-body .linenos div pre,
.markdown-body .linenodiv pre,
.markdown-body .linenodiv {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-left-radius: 3px;
  -webkit-border-bottom-left-radius: 3px;
  -moz-border-radius-topleft: 3px;
  -moz-border-radius-bottomleft: 3px;
  border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
}

.markdown-body .code div pre,
.markdown-body .code div {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-right-radius: 3px;
  -webkit-border-bottom-right-radius: 3px;
  -moz-border-radius-topright: 3px;
  -moz-border-radius-bottomright: 3px;
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px;
}

.markdown-body * {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body input {
  font: 13px Helvetica, arial, freesans, clean, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";
  line-height: 1.4;
}

.markdown-body a {
  color: #4183c4;
  text-decoration: none;
}

.markdown-body a:hover,
.markdown-body a:focus,
.markdown-body a:active {
  text-decoration: underline;
}

.markdown-body hr {
  height: 0;
  margin: 15px 0;
  overflow: hidden;
  background: transparent;
  border: 0;
  border-bottom: 1px solid #ddd;
}

.markdown-body hr:before,
.markdown-body hr:after {
  display: table;
  content: " ";
}

.markdown-body hr:after {
  clear: both;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  margin-top: 15px;
  margin-bottom: 15px;
  line-height: 1.1;
}

.markdown-body h1 {
  font-size: 30px;
}

.markdown-body h2 {
  font-size: 21px;
}

.markdown-body h3 {
  font-size: 16px;
}

.markdown-body h4 {
  font-size: 14px;
}

.markdown-body h5 {
  font-size: 12px;
}

.markdown-body h6 {
  font-size: 11px;
}

.markdown-body blockquote {
  margin: 0;
}

.markdown-body ul,
.markdown-body ol {
  padding: 0;
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body ol ol,
.markdown-body ul ol {
  list-style-type: lower-roman;
}

.markdown-body ul ul ol,
.markdown-body ul ol ol,
.markdown-body ol ul ol,
.markdown-body ol ol ol {
  list-style-type: lower-alpha;
}

.markdown-body dd {
  margin-left: 0;
}

.markdown-body code,
.markdown-body pre,
.markdown-body samp {
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  font-size: 12px;
}

.markdown-body pre {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body kbd {
  background-color: #e7e7e7;
  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);
  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);
  background-image: linear-gradient(#fefefe, #e7e7e7);
  background-repeat: repeat-x;
  border-radius: 2px;
  border: 1px solid #cfcfcf;
  color: #000;
  padding: 3px 5px;
  line-height: 10px;
  font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;
  display: inline-block;
}

.markdown-body>*:first-child {
  margin-top: 0 !important;
}

.markdown-body>*:last-child {
  margin-bottom: 0 !important;
}

.markdown-body .headeranchor-link {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  display: block;
  padding-right: 6px;
  padding-left: 30px;
  margin-left: -30px;
}

.markdown-body .headeranchor-link:focus {
  outline: none;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  position: relative;
  margin-top: 1em;
  margin-bottom: 16px;
  font-weight: bold;
  line-height: 1.4;
}

.markdown-body h1 .headeranchor,
.markdown-body h2 .headeranchor,
.markdown-body h3 .headeranchor,
.markdown-body h4 .headeranchor,
.markdown-body h5 .headeranchor,
.markdown-body h6 .headeranchor {
  display: none;
  color: #000;
  vertical-align: middle;
}

.markdown-body h1:hover .headeranchor-link,
.markdown-body h2:hover .headeranchor-link,
.markdown-body h3:hover .headeranchor-link,
.markdown-body h4:hover .headeranchor-link,
.markdown-body h5:hover .headeranchor-link,
.markdown-body h6:hover .headeranchor-link {
  height: 1em;
  padding-left: 8px;
  margin-left: -30px;
  line-height: 1;
  text-decoration: none;
}

.markdown-body h1:hover .headeranchor-link .headeranchor,
.markdown-body h2:hover .headeranchor-link .headeranchor,
.markdown-body h3:hover .headeranchor-link .headeranchor,
.markdown-body h4:hover .headeranchor-link .headeranchor,
.markdown-body h5:hover .headeranchor-link .headeranchor,
.markdown-body h6:hover .headeranchor-link .headeranchor {
  display: inline-block;
}

.markdown-body h1 {
  padding-bottom: 0.3em;
  font-size: 2.25em;
  line-height: 1.2;
  border-bottom: 1px solid #eee;
}

.markdown-body h2 {
  padding-bottom: 0.3em;
  font-size: 1.75em;
  line-height: 1.225;
  border-bottom: 1px solid #eee;
}

.markdown-body h3 {
  font-size: 1.5em;
  line-height: 1.43;
}

.markdown-body h4 {
  font-size: 1.25em;
}

.markdown-body h5 {
  font-size: 1em;
}

.markdown-body h6 {
  font-size: 1em;
  color: #777;
}

.markdown-body p,
.markdown-body blockquote,
.markdown-body ul,
.markdown-body ol,
.markdown-body dl,
.markdown-body table,
.markdown-body pre,
.markdown-body .admonition {
  margin-top: 0;
  margin-bottom: 16px;
}

.markdown-body hr {
  height: 4px;
  padding: 0;
  margin: 16px 0;
  background-color: #e7e7e7;
  border: 0 none;
}

.markdown-body ul,
.markdown-body ol {
  padding-left: 2em;
}

.markdown-body ul ul,
.markdown-body ul ol,
.markdown-body ol ol,
.markdown-body ol ul {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body li>p {
  margin-top: 16px;
}

.markdown-body dl {
  padding: 0;
}

.markdown-body dl dt {
  padding: 0;
  margin-top: 16px;
  font-size: 1em;
  font-style: italic;
  font-weight: bold;
}

.markdown-body dl dd {
  padding: 0 16px;
  margin-bottom: 16px;
}

.markdown-body blockquote {
  padding: 0 15px;
  color: #777;
  border-left: 4px solid #ddd;
}

.markdown-body blockquote>:first-child {
  margin-top: 0;
}

.markdown-body blockquote>:last-child {
  margin-bottom: 0;
}

.markdown-body table {
  display: block;
  width: 100%;
  overflow: auto;
  word-break: normal;
  word-break: keep-all;
}

.markdown-body table th {
  font-weight: bold;
}

.markdown-body table th,
.markdown-body table td {
  padding: 6px 13px;
  border: 1px solid #ddd;
}

.markdown-body table tr {
  background-color: #fff;
  border-top: 1px solid #ccc;
}

.markdown-body table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

.markdown-body img {
  max-width: 100%;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body code,
.markdown-body samp {
  padding: 0;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
  margin: 0;
  font-size: 85%;
  background-color: rgba(0,0,0,0.04);
  border-radius: 3px;
}

.markdown-body code:before,
.markdown-body code:after {
  letter-spacing: -0.2em;
  content: "\00a0";
}

.markdown-body pre>code {
  padding: 0;
  margin: 0;
  font-size: 100%;
  word-break: normal;
  white-space: pre;
  background: transparent;
  border: 0;
}

.markdown-body .codehilite {
  margin-bottom: 16px;
}

.markdown-body .codehilite pre,
.markdown-body pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f7f7f7;
  border-radius: 3px;
}

.markdown-body .codehilite pre {
  margin-bottom: 0;
  word-break: normal;
}

.markdown-body pre {
  word-wrap: normal;
}

.markdown-body pre code {
  display: inline;
  max-width: initial;
  padding: 0;
  margin: 0;
  overflow: initial;
  line-height: inherit;
  word-wrap: normal;
  background-color: transparent;
  border: 0;
}

.markdown-body pre code:before,
.markdown-body pre code:after {
  content: normal;
}

/* Admonition */
.markdown-body .admonition {
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  position: relative;
  border-radius: 3px;
  border: 1px solid #e0e0e0;
  border-left: 6px solid #333;
  padding: 10px 10px 10px 30px;
}

.markdown-body .admonition table {
  color: #333;
}

.markdown-body .admonition p {
  padding: 0;
}

.markdown-body .admonition-title {
  font-weight: bold;
  margin: 0;
}

.markdown-body .admonition>.admonition-title {
  color: #333;
}

.markdown-body .attention>.admonition-title {
  color: #a6d796;
}

.markdown-body .caution>.admonition-title {
  color: #d7a796;
}

.markdown-body .hint>.admonition-title {
  color: #96c6d7;
}

.markdown-body .danger>.admonition-title {
  color: #c25f77;
}

.markdown-body .question>.admonition-title {
  color: #96a6d7;
}

.markdown-body .note>.admonition-title {
  color: #d7c896;
}

.markdown-body .admonition:before,
.markdown-body .attention:before,
.markdown-body .caution:before,
.markdown-body .hint:before,
.markdown-body .danger:before,
.markdown-body .question:before,
.markdown-body .note:before {
  font: normal normal 16px fontawesome-mini;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  line-height: 1.5;
  color: #333;
  position: absolute;
  left: 0;
  top: 0;
  padding-top: 10px;
  padding-left: 10px;
}

.markdown-body .admonition:before {
  content: "\f056\00a0";
  color: 333;
}

.markdown-body .attention:before {
  content: "\f058\00a0";
  color: #a6d796;
}

.markdown-body .caution:before {
  content: "\f06a\00a0";
  color: #d7a796;
}

.markdown-body .hint:before {
  content: "\f05a\00a0";
  color: #96c6d7;
}

.markdown-body .danger:before {
  content: "\f057\00a0";
  color: #c25f77;
}

.markdown-body .question:before {
  content: "\f059\00a0";
  color: #96a6d7;
}

.markdown-body .note:before {
  content: "\f040\00a0";
  color: #d7c896;
}

.markdown-body .admonition::after {
  content: normal;
}

.markdown-body .attention {
  border-left: 6px solid #a6d796;
}

.markdown-body .caution {
  border-left: 6px solid #d7a796;
}

.markdown-body .hint {
  border-left: 6px solid #96c6d7;
}

.markdown-body .danger {
  border-left: 6px solid #c25f77;
}

.markdown-body .question {
  border-left: 6px solid #96a6d7;
}

.markdown-body .note {
  border-left: 6px solid #d7c896;
}

.markdown-body .admonition>*:first-child {
  margin-top: 0 !important;
}

.markdown-body .admonition>*:last-child {
  margin-bottom: 0 !important;
}

/* progress bar*/
.markdown-body .progress {
  display: block;
  width: 300px;
  margin: 10px 0;
  height: 24px;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #ededed;
  position: relative;
  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);
}

.markdown-body .progress-label {
  position: absolute;
  text-align: center;
  font-weight: bold;
  width: 100%; margin: 0;
  line-height: 24px;
  color: #333;
  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;
  -webkit-font-smoothing: antialiased !important;
  white-space: nowrap;
  overflow: hidden;
}

.markdown-body .progress-bar {
  height: 24px;
  float: left;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #96c6d7;
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);
  background-size: 30px 30px;
  background-image: -webkit-linear-gradient(
    135deg, rgba(255, 255, 255, .4) 27%,
    transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%,
    transparent 77%, transparent
  );
  background-image: -moz-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -ms-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -o-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
}

.markdown-body .progress-100plus .progress-bar {
  background-color: #a6d796;
}

.markdown-body .progress-80plus .progress-bar {
  background-color: #c6d796;
}

.markdown-body .progress-60plus .progress-bar {
  background-color: #d7c896;
}

.markdown-body .progress-40plus .progress-bar {
  background-color: #d7a796;
}

.markdown-body .progress-20plus .progress-bar {
  background-color: #d796a6;
}

.markdown-body .progress-0plus .progress-bar {
  background-color: #c25f77;
}

.markdown-body .candystripe-animate .progress-bar{
  -webkit-animation: animate-stripes 3s linear infinite;
  -moz-animation: animate-stripes 3s linear infinite;
  animation: animate-stripes 3s linear infinite;
}

@-webkit-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@-moz-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

.markdown-body .gloss .progress-bar {
  box-shadow:
    inset 0 4px 12px rgba(255, 255, 255, .7),
    inset 0 -12px 0 rgba(0, 0, 0, .05);
}

/* Multimarkdown Critic Blocks */
.markdown-body .critic_mark {
  background: #ff0;
}

.markdown-body .critic_delete {
  color: #c82829;
  text-decoration: line-through;
}

.markdown-body .critic_insert {
  color: #718c00 ;
  text-decoration: underline;
}

.markdown-body .critic_comment {
  color: #8e908c;
  font-style: italic;
}

.markdown-body .headeranchor {
  font: normal normal 16px octicons-anchor;
  line-height: 1;
  display: inline-block;
  text-decoration: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.headeranchor:before {
  content: '\f05c';
}

.markdown-body .task-list-item {
  list-style-type: none;
}

.markdown-body .task-list-item+.task-list-item {
  margin-top: 3px;
}

.markdown-body .task-list-item input {
  margin: 0 4px 0.25em -20px;
  vertical-align: middle;
}

/* Media */
@media only screen and (min-width: 480px) {
  .markdown-body {
    font-size:14px;
  }
}

@media only screen and (min-width: 768px) {
  .markdown-body {
    font-size:16px;
  }
}

@media print {
  .markdown-body * {
    background: transparent !important;
    color: black !important;
    filter:none !important;
    -ms-filter: none !important;
  }

  .markdown-body {
    font-size:12pt;
    max-width:100%;
    outline:none;
    border: 0;
  }

  .markdown-body a,
  .markdown-body a:visited {
    text-decoration: underline;
  }

  .markdown-body .headeranchor-link {
    display: none;
  }

  .markdown-body a[href]:after {
    content: " (" attr(href) ")";
  }

  .markdown-body abbr[title]:after {
    content: " (" attr(title) ")";
  }

  .markdown-body .ir a:after,
  .markdown-body a[href^="javascript:"]:after,
  .markdown-body a[href^="#"]:after {
    content: "";
  }

  .markdown-body pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  .markdown-body pre,
  .markdown-body blockquote {
    border: 1px solid #999;
    padding-right: 1em;
    page-break-inside: avoid;
  }

  .markdown-body .progress,
  .markdown-body .progress-bar {
    -moz-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none;
  }

  .markdown-body .progress {
    border: 1px solid #ddd;
  }

  .markdown-body .progress-bar {
    height: 22px;
    border-right: 1px solid #ddd;
  }

  .markdown-body tr,
  .markdown-body img {
    page-break-inside: avoid;
  }

  .markdown-body img {
    max-width: 100% !important;
  }

  .markdown-body p,
  .markdown-body h2,
  .markdown-body h3 {
    orphans: 3;
    widows: 3;
  }

  .markdown-body h2,
  .markdown-body h3 {
    page-break-after: avoid;
  }
}
</style><title>readMe</title></head><body><article class="markdown-body"><h1 id="php"><a name="user-content-php" href="#php" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>大话PHP设计模式</h1>
<!-- * 第一章. <a href="#1">命名空间与Autoload</a>
* 第二章. <a href="#2">PHP面向对象</a>
* 第三章. <a href="#3">三种基础设计模式</a>
* 第四章. <a href="#4">适配器模式</a>
* 第五章. <a href="#5">策略模式</a>
* 第六章. <a href="#6">数据对象映射模式</a>
* 第七章. <a href="#7">观察者模式</a>
* 第八章. <a href="#8">原型模式</a>
* 第九章. <a href="#9">装饰器模式</a>
* 第十章. <a href="#10">迭代器模式</a>
* 第十一章. <a href="#11">代理模式</a>
 -->

<div class="toc">
<ul>
<li><a href="#php">大话PHP设计模式</a><ul>
<li><a href="#autoload"><font id="1">命名空间与Autoload</font></a><ul>
<li><a href="#_1"><font id="1-1">（一）命名空间</font></a></li>
<li><a href="#autoload_1"><font id="1-2">（二）Autoload</font></a></li>
<li><a href="#psr-0"><font id="1-3">（三）PSR-0规范</font></a></li>
</ul>
</li>
<li><a href="#php_1"><font id="2">PHP面向对象</font></a><ul>
<li><a href="#php_2"><font id="2-1">（一）PHP链式操作的实现</font></a></li>
</ul>
</li>
<li><a href="#_2"><font id="3">三种基础设计模式</font></a><ul>
<li><a href="#_3"><font id="3-1">（一）基础设计模式简介</font></a></li>
<li><a href="#_4"><font id="3-2">（二）工厂模式</font></a></li>
<li><a href="#_5"><font id="3-3">（三）单例模式</font></a></li>
<li><a href="#_6"><font id="3-4">（四）注册树模式</font></a></li>
</ul>
</li>
<li><a href="#_7"><font id="4">适配器模式</font></a><ul>
<li><a href="#_8"><font id="4-1">简介</font></a></li>
<li><a href="#_9"><font id="4-2">实现与使用</font></a></li>
</ul>
</li>
<li><a href="#_10"><font id="5">策略模式</font></a><ul>
<li><a href="#_11"><font id="5-1">简介</font></a></li>
<li><a href="#_12"><font id="5-2">实现与使用</font></a></li>
</ul>
</li>
<li><a href="#_13"><font id="6">数据对象映射模式</font></a><ul>
<li><a href="#_14"><font id="6-1">简介</font></a></li>
<li><a href="#_15"><font id="6-2">简单实现</font></a></li>
<li><a href="#_16"><font id="6-3">复杂实现</font></a></li>
</ul>
</li>
<li><a href="#_17"><font id="7">观察者模式</font></a><ul>
<li><a href="#_18"><font id="7-1">简介</font></a></li>
<li><a href="#_19"><font id="7-2">实现和使用</font></a></li>
</ul>
</li>
<li><a href="#_20"><font id="8">原型模式</font></a><ul>
<li><a href="#_21"><font id="8-1">简介</font></a></li>
<li><a href="#_22"><font id="8-2">实现和使用</font></a></li>
</ul>
</li>
<li><a href="#_23"><font id="9">装饰器模式</font></a><ul>
<li><a href="#_24"><font id="9-1">简介</font></a></li>
<li><a href="#_25"><font id="9-2">实现和使用</font></a></li>
</ul>
</li>
<li><a href="#_26"><font id="10">迭代器模式</font></a><ul>
<li><a href="#_27"><font id="10-1">简介</font></a></li>
<li><a href="#_28"><font id="10-2">实现和使用</font></a></li>
</ul>
</li>
<li><a href="#_29"><font id="11">代理模式</font></a><ul>
<li><a href="#_30"><font id="11-1">简介</font></a></li>
<li><a href="#_31"><font id="11-2">实现和使用</font></a></li>
</ul>
</li>
<li><a href="#_32">综合实战</a><ul>
<li><a href="#_33">（一）面向对象设计基本原则</a></li>
<li><a href="#mvc">（二）MVC结构（工程组织结构）</a></li>
<li><a href="#_34">（三）自动加载配置</a></li>
<li><a href="#_35">（四）从配置中生成数据库连接</a></li>
<li><a href="#mvc_1">（五）装饰器模式在MVC中的使用</a></li>
<li><a href="#mvc_2">（六）观察者模式在MVC中的使用</a></li>
<li><a href="#mvc_3">（七）代理模式在MVC中的使用</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<h2 id="autoload"><a name="user-content-autoload" href="#autoload" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="1">命名空间与Autoload</font></h2>
<h3 id="_1"><a name="user-content-_1" href="#_1" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="1-1">（一）命名空间</font></h3>
<p>test1.php<br>
</p><pre><code class="php">&lt;?php
namespace Test1;

function test() {
    echo __FILE__;
}
</code></pre><br>
test2.php<br>
<pre><code class="php">namespace Test2;

function test() {
    echo __FILE__;
}
</code></pre><br>
test.php<br>
<pre><code class="php">require 'test1.php';
require 'test2.php';

Test1\test();
Test2\test();
</code></pre><p></p>
<h3 id="autoload_1"><a name="user-content-autoload_1" href="#autoload_1" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="1-2">（二）Autoload</font></h3>
<p>test.php<br>
</p><pre><code class="php">// 允许存在多个，而不会报错重复定义，取代__autoload()
spl_autoload_register(autoload1);
spl_autoload_register(autoload2);

Test1\test();
Test2\test();

function autoload1($class) {
    require __DIR__ . '/' . $class . '.php';
}
function autoload2($class) {
    require __DIR__ . '/' . $class . '.php';
}
</code></pre><p></p>
<h3 id="psr-0"><a name="user-content-psr-0" href="#psr-0" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="1-3">（三）PSR-0规范</font></h3>
<p>（1）三项规定</p>
<ul>
<li>命名空间必须与绝对路径一致</li>
<li>类名首字母必须大写</li>
<li>除入口文件外，其他“.php”必须只有一个类</li>
</ul>
<p>（2）开发符合PSR-0规范的基础框架</p>
<ul>
<li>全部使用命名空间</li>
<li>所有PHP文件必须自动载入，不能有include/require</li>
<li>单一入口</li>
</ul>
<p>（3）具体步骤</p>
<ul>
<li>建立App文件夹存放所有功能逻辑业务代码</li>
<li>建立IMooc文件夹存放业务无关公共类（命名空间即是文件绝对路径）</li>
<li>文件名必须与类名一致</li>
</ul>
<p>\IMooc\Object.php<br>
</p><pre><code class="php">namespace IMooc;

class Object() {
    static function test() {
        echo __METHOD__;
    }
}
</code></pre><br>
\App\Controller\Home\Index.php<br>
<pre><code class="php">namespace \App\Controller\Home;

class Index() {
    static function test() {
        echo __METHOD__;
    }
}
</code></pre><br>
\IMooc\Loader.php<br>
<pre><code class="php">namespace IMooc;
class Loader{
    // $class为包含命名空间的类名字符串
    static function autoload($class){
        require BASEDIR. '/' . str_replace(''\\'', ''/'', $class). '.php';
    }
}
</code></pre><br>
\index.php<br>
<pre><code class="php">define(''BASEDIR'', __DIR__);
include BASEDIR . '/IMooc/Loader.php';

// 替代__autoload()函数
spl_autoload_register('\\IMooc\\Loader::autoload');
IMooc\Object::test();
App\Controller\Home\Index::test();
</code></pre><p></p>
<h2 id="php_1"><a name="user-content-php_1" href="#php_1" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="2">PHP面向对象</font></h2>
<h3 id="php_2"><a name="user-content-php_2" href="#php_2" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="2-1">（一）PHP链式操作的实现</font></h3>
<p>\IMooc\Database.php<br>
</p><pre><code class="php">namespace IMooc;

class Database{
     // 核心：在每个方法最后return $this;
    public function where($where){
        return $this;
    }

    public function order($order){
        return $this;
    }

    public function limit($limit){
        return $this;
    }
}
</code></pre><br>
\index.php<br>
<pre><code class="php">// 通过一行代码实现多行代码
$db = new IMooc\Database();
$db-&gt;where('id=1')-&gt;where('name=2')-&gt;order('id desc')-&gt;limit(10);
</code></pre><p></p>
<h2 id="_2"><a name="user-content-_2" href="#_2" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="3">三种基础设计模式</font></h2>
<h3 id="_3"><a name="user-content-_3" href="#_3" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="3-1">（一）基础设计模式简介</font></h3>
<ul>
<li>工厂模式，工厂方法或类生成对象，而不是在代码中直接new</li>
<li>单例模式，使某个类的对象仅允许创建一个</li>
<li>注册模式，全局共享和交换对象</li>
</ul>
<h3 id="_4"><a name="user-content-_4" href="#_4" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="3-2">（二）工厂模式</font></h3>
<p>\IMooc\Factory.php<br>
</p><pre><code class="php">namespace IMooc;

class Factory{
    static function createDatabase() { 
        // 工厂模式用途：统一定义类名及参数
        $db = new Database;
        reutrn $db;
    }
}
</code></pre><br>
\index.php<br>
<pre><code class="php">$db = IMooc\Factory::createDatabase();
</code></pre><p></p>
<h3 id="_5"><a name="user-content-_5" href="#_5" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="3-3">（三）单例模式</font></h3>
<p>\IMooc\Database.php<br>
</p><pre><code class="php">// 外层无法直接new，屏蔽其他地方实例化
protected $db;
private function __construct() {}
static function getInstance() {
    if(!self::$db){
        self::$db = new self();
    }
    return self::$db;
}
</code></pre><br>
\index.php<br>
<pre><code class="php">// 无论如何都只会创建一个实例
$db = \IMooc\Database::getInstance();
$db = \IMooc\Database::getInstance();
$db = \IMooc\Database::getInstance();
</code></pre><br>
\IMooc\Factory.php<br>
<pre><code class="php">// 工厂单例模式
static function createDatabase() {
    $db = Database::getInstance();
    reutrn $db;
}
</code></pre><p></p>
<h3 id="_6"><a name="user-content-_6" href="#_6" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="3-4">（四）注册树模式</font></h3>
<p>\IMooc\Register.php<br>
</p><pre><code class="php">namespace IMooc;
class Register{
    protected static $objects;

    // 将对象放在树上
    static function set($alias, $object) {
        self::$objects[$alias] = $object;
    }

    // 将对象在树上移除
    static function _unset($alias){
        unset(self::$objects[$alias]);
    }

    // 取得树上的对象
    static function get($alias){
        return self::$objects[$alias];
    }
}
</code></pre><br>
\IMooc\Factory.php<br>
<pre><code class="php">// 映射到全局树上
static function createDatabase() {
    $db = Database::getInstance();
    Register::set('db1', $db);
    reutrn $db;
}
</code></pre><br>
\index.php<br>
<pre><code class="php">// 对象的注册及卸载由环境初始化工作决定，业务逻辑代码中只需要从树上读取即可。
$db = \IMooc\Register::get('db1');
</code></pre><p></p>
<h2 id="_7"><a name="user-content-_7" href="#_7" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="4">适配器模式</font></h2>
<h3 id="_8"><a name="user-content-_8" href="#_8" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="4-1">简介</font></h3>
<ul>
<li>适配器模式，可以将截然不同的函数接口封装成统一的API。</li>
<li>实际应用举例，PHP的数据库操作有mysql，mysqli，pdo3种，可以用适配器模式统一成一致。类似的场景还有cache适配器，将memcache，redis，file，apc等不同的缓存函数，统一成一致。</li>
</ul>
<h3 id="_9"><a name="user-content-_9" href="#_9" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="4-2">实现与使用</font></h3>
<p>\IMooc\Database.php<br>
</p><pre><code class="php">// 适配器约定好有哪些行为，将不同数据库函数封装成统一的API.
interface IDatabase{
    function connect($host, $user, $password, $dbname);
    function query($sql);
    function close();
}
</code></pre><br>
\IMooc\Database\MySQL.php<br>
<pre><code class="php">namespace \IMooc\Database;

use IMooc\IDatabase;

class MySQL implements IDatabase{

    protected $conn;

    function connect($host, $user, $password, $dbname){
        $this-&gt;conn = mysql_connect($host, $user, $password);
        return mysql_select_db($dbname, $$this-&gt;conn);
    }

    function query($sql){
        return mysql_query($sql, $this-&gt;conn);
    }

    function close(){
        mysql_close($this-&gt;conn);
    }
}
</code></pre><br>
\IMooc\Database\MySQLi.php<br>
<pre><code class="php">namespace \IMooc\Database;

use IMooc\IDatabase;

class MySQLi implements IDatabase{

    protected $conn;

    function connect($host, $user, $password, $dbname){
        $this-&gt;conn = mysqli_connect($host, $user, $password, $dbname);
    }

    function query($sql){
        return mysqli_query($this-&gt;conn, $sql);
    }

    function close(){
        mysqli_close($this-&gt;conn);
    }
}
</code></pre><br>
\IMooc\Database\PDO.php<br>
<pre><code class="php">namespace \IMooc\Database;

use IMooc\IDatabase;

class PDO implements IDatabase{

    protected $conn;

    function connect($host, $user, $password, $dbname){
        $this-&gt;conn = new \PDO("mysql:host=$host;dbname=$dbname", $user, $password);
    }

    function query($sql){
        return $this-&gt;conn-&gt;query($sql);
    }

    function close(){
        unset($this-&gt;conn);
    }
}
</code></pre><br>
\index.php<br>
<pre><code class="php">// 任意数据库操作切换，框架必须要做到支持任意机器上的任意数据库
$db = new IMooc\Database\PDO();
$db-&gt;connect('127.0.0.1', 'root', 'root', 'test');
$db-&gt;query('show databases');
$db-&gt;close();
</code></pre><p></p>
<h2 id="_10"><a name="user-content-_10" href="#_10" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="5">策略模式</font></h2>
<h3 id="_11"><a name="user-content-_11" href="#_11" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="5-1">简介</font></h3>
<ul>
<li>策略模式，将一组特定的行为和算法封装成类，通过解耦解决硬编码的问题，以适应某些特定的上下文环境，这种模式就是策略模式。</li>
<li>实际应用举例，假如一个电商网站系统，针对男性女性用户要各自跳转到不同的商品类目，并且所有广告位展示不同的广告。</li>
<li>使用策略模式可以实现Ioc，依赖倒置、控制反转</li>
</ul>
<h3 id="_12"><a name="user-content-_12" href="#_12" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="5-2">实现与使用</font></h3>
<p>\IMooc\UserStrategy.php<br>
</p><pre><code class="php">namespace IMooc;

// 约定策略有哪些行为
interface UserStrategy{
    function showAd();
    function showCategory();
}
</code></pre><br>
\IMooc\FemaleUserStrategy.php<br>
<pre><code class="php">namespace IMooc;

class FemaleUserStrategy implements UserStrategy{
    function showAd(){
        echo "2014新款女装";
    }

    function showCategory(){
        echo "女装";
    }
}
</code></pre><br>
\IMooc\MaleUserStrategy.php<br>
<pre><code class="php">namespace IMooc;

class MaleUserStrategy implements UserStrategy{
    function showAd(){
        echo "Ipone6";
    }

    function showCategory(){
        echo "电子产品";
    }
}
</code></pre><br>
\index.php<br>
<pre><code class="php">
// page依赖strategy类，通过策略模式解耦，在执行代码时进行绑定
class Page{
    protected $strategy;

    function index(){
        echo 'Ad:';
        $this-&gt;strategy-&gt;Ad();
        echo '&lt;br/&gt;';

        echo 'category';
        $this-&gt;strategy-&gt;showCategory();
        echo '&lt;br/&gt;';
    }

    function setStrategy(\IMooc\UserStrategy $strategy) {
        $this-&gt;strategy = $strategy;
    }
}

$page = new Page();

// 根据上下文环境设置策略，处理分支逻辑
if(isset($_GET['female'])){
    $strategy = new \IMooc\MaleUserStrategy();
} else {
    $strategy = new \IMooc\UserStrategy();
}
$page-&gt;setStrategy($strategy);
$page-&gt;index();
</code></pre><p></p>
<h2 id="_13"><a name="user-content-_13" href="#_13" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="6">数据对象映射模式</font></h2>
<h3 id="_14"><a name="user-content-_14" href="#_14" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="6-1">简介</font></h3>
<ul>
<li>数据对象映射模式，是将对象和数据存储映射起来，对一个对象的操作会映射为对数据存储的操作，与数据库表中的一条记录对应起来。</li>
<li>在代码中实现数据对象映射模式，我们将实现一个ORM类，将复杂的SQL语句映射成对象属性的操作。</li>
<li>结合使用数据对象映射模式，工厂模式，注册模式</li>
</ul>
<h3 id="_15"><a name="user-content-_15" href="#_15" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="6-2">简单实现</font></h3>
<p>\IMooc\User.php<br>
</p><pre><code class="php">namespace IMooc;

class User{
    public $id;
    public $name;
    public $mobile;
    public $regtime;

    protected $db;

    function __construct($id){
        $this-&gt;db = new IMooc\Database\MySQLi();
        $this-&gt;db-&gt;connect('127.0.0.1', 'root', 'root', 'test');
        $res = $this-&gt;db-&gt;query("select * from user where id = {$id} limit 1");
        $data = $res-&gt;fetch_assoc();
        $this-&gt;id = $data['id'];
        $this-&gt;name = $data['name'];
        $this-&gt;mobile = $data['mobile'];
        $this-&gt;regtime = $data['regtime'];
    }

    function __destruct() {
        $this-&gt;db-&gt;query("update user set name = '{$this-&gt;name}', mobile = '{$this-&gt;mobile}', regtime = '{$this-&gt;regtime}' where id = {$this-&gt;id} limit 1");
    }
}
</code></pre><br>
\index.php<br>
<pre><code class="php">
// 将对SQL的直接操作换成对对象的操作
$user = new User(1);

$user-&gt;mobile = '13417502938';
$user-&gt;name = 'test';
$user-&gt;regtime = date('Y-m-d H:i:s');

</code></pre><p></p>
<h3 id="_16"><a name="user-content-_16" href="#_16" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="6-3">复杂实现</font></h3>
<p>\index.php<br>
</p><pre><code class="php">class page{
    function index() {
        $user = \IMooc\Factory::getUser(1);
        $user-&gt;name = 'dancdw';
        $this-&gt;test();
        echo 'ok';
    }

    function test() {
        $user = \IMooc\Factory::getUser(1);
        $user-&gt;mobile = '13417544441';
    }
}

$page = new page();
$page-&gt;index();

</code></pre><br>
\IMooc\Factory.php<br>
<pre><code class="php">// 定义工厂方法，便于统一管理
static function getUser($id) {

    // 如果是$id相同，表示对象相同，解决对象重复创建问题
    $key = 'user_' . $id;
    $user = Register::get($key);
    if(!$user) {
        Register::set($key, new User($id));
    }
    return $user;
}
</code></pre><p></p>
<h2 id="_17"><a name="user-content-_17" href="#_17" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="7">观察者模式</font></h2>
<h3 id="_18"><a name="user-content-_18" href="#_18" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="7-1">简介</font></h3>
<ul>
<li>观察者模式（Observer），当一个对象状态发生改变时，依赖它的对象全部会受到通知，并自动更新</li>
<li>场景：一个事件发生后，要执行一连串更新操作。传统的编程方式，就是在事件的代码之后加入处理逻辑。当更新的逻辑增多之后，代码会变得难以维护。这种方式是耦合的，侵入式的，增加新的逻辑需要修改事件主体的代码。</li>
<li>观察者模式实现了耦合，非入侵式的通知与更新机制。</li>
<li>
<h3 id="_19"><a name="user-content-_19" href="#_19" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="7-2">实现和使用</font></h3>
<br>
\index.php<br>
<pre><code class="php">
// 事件主体，实现事件与业务逻辑解耦
class Event extends \IMooc\EventGenerator{
    function trigger() {
        echo "Event&lt;br/&gt;\n";
        // 通知所有观察者
        $this-&gt;notify();
    }
}

// 增加观察者1
class Observer1 implements \IMooc\Observer{
    function update($event_info = null) {
        echo "逻辑1&lt;br /&gt;\n";
    }
}

// 增加观察者2
class Observer2 implements \IMooc\Observer{
    function update($event_info = null) {
        echo "逻辑1&lt;br /&gt;\n";
    }
}

$event = new Event();
$event-&gt;addObserver(new Observer1());
$event-&gt;addObserver(new Observer2());
$event-&gt;trigger();

</code></pre><br>
\IMooc\EventGenerator.php<br>
<pre><code class="php">namespace IMooc;

// 被观察的事件基类
abstract class EventGenerator{

    // 事件本身不知道监听者是谁
    private $observers = array();

    // 增加观察者
    function addObserver(Observer $observer){
        $this-&gt;observers[] = $observer;
    }

    // 通知观察者
    function notify() {
        foreach($this-&gt;observers as $observer) {
            $observer-&gt;update();
        }
    }
}
</code></pre><br>
\IMooc\Oberver.php<br>
<pre><code class="php">namespace IMooc;

interface Observer{
    // 定义观察者的行为
    function update($event_info = null);
}
</code></pre></li>
</ul>
<h2 id="_20"><a name="user-content-_20" href="#_20" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="8">原型模式</font></h2>
<h3 id="_21"><a name="user-content-_21" href="#_21" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="8-1">简介</font></h3>
<ul>
<li>与工厂模式作用类似，都是用来创建对象。</li>
<li>与工厂模式的实现不同，原型模式是先创建好一个原型对象，然后通过clone原型对象来创建新的对象。这样就免去了类创建时重复的初始化操作。</li>
<li>原型模式适用于大对象的创建。创建一个大对象需要很多的开销，如果每次new就会消耗很大，原型模式仅需内存拷贝即可。</li>
</ul>
<h3 id="_22"><a name="user-content-_22" href="#_22" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="8-2">实现和使用</font></h3>
<p>\IMooc\Canvas.php<br>
</p><pre><code class="php">namespace IMooc;

class Canvas{
    public $data;

    // 初始化画布
    function init($width = 20, $height = 10) {
        $data = array();
        for ($i=0; $i &lt; $height; $i++) { 
            for ($i=0; $i &lt; $width; $i++) { 
                $data[$i][$j] = '*';
            }
        }
        $this-&gt;data = $data;
    }

    // 绘制图形
    function rect($a1, $a2, $b1, $b2) {
        foreach ($this-&gt;data as $k1 =&gt; $line) {
            if ($key1 &lt; $a1 or $k1 &gt;$a2) continue;
            foreach ($line as $k2 =&gt; $char) {
                if ($k2 &lt; $b or $k2 &gt; $b2) continue;
                $this-&gt;data[$k1][$k2] = '&amp;nbsp';
            }
        }
    }

    // 输出
    function draw() {
        foreach($this-&gt;data as $line){
            foreach ($line as $char) {
                echo $char;
            }
            echo "&lt;br/&gt;\n";
        }
    }
}
</code></pre><br>
\index.php<br>
<pre><code class="php">// 创建原型并初始化
$prototype = new IMooc\Canvas();
$prototype-&gt;init();
$prototype-&gt;setColor();

// 通过克隆创建新对象，节省系统开销直接在内存中拷贝
$canvas1 = clone $prototype;
$canvas1-&gt;rect(3, 6, 4, 12);
$canvas1-&gt;draw();

$canvas2 = clone $prototype;
$canvas2-&gt;rect(3, 6, 4, 12);
$canvas2-&gt;draw();
</code></pre><p></p>
<h2 id="_23"><a name="user-content-_23" href="#_23" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="9">装饰器模式</font></h2>
<h3 id="_24"><a name="user-content-_24" href="#_24" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="9-1">简介</font></h3>
<ul>
<li>装饰器模式（Decorator），可以动态地添加修改类的功能。</li>
<li>一个类提供了一项功能，如果要再修改并添加额外的功能，传统的编程模式，需要写一个子类继承它，并重新实现类的方法。</li>
<li>使用装饰器模式，仅需在运行时添加一个装饰器对象即可实现，可以实现最大的灵活性。</li>
</ul>
<h3 id="_25"><a name="user-content-_25" href="#_25" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="9-2">实现和使用</font></h3>
<p>\index.php<br>
</p><pre><code class="php">class Canvas2 extends IMooc\Canvas{
    // 修改渲染颜色
    function draw() {
        echo "&lt;div style='color:red;'&gt;";
        parent::draw();
        echo '&lt;/div&gt;';
    }
}

// 传统继承方式
$canvas1 = new Canvas2();
$canvas1-&gt;init();
$canvas1-&gt;rect(3, 6, 4, 12);
$canvas1-&gt;draw();

// 添加装饰器方式
$canvas2 = new IMooc\Canvas();
$canvas2-&gt;init();
$canvas2-&gt;addDecorator(new \IMooc\ColorDrawDecorator('green'));
$canvas2-&gt;addDecorator(new \IMooc\SizeDrawDecorator('10px'));
$canvas2-&gt;rect(3, 6, 4, 12);
$canvas2-&gt;draw();
</code></pre><br>
\IMooc\DrawDecorator.php<br>
<pre><code class="php">namespace IMooc;

// 装饰器接口
interface DrawDecorator{ // 接口中定义的都是抽象方法，因为继承接口必须实现里面所有方法
    function beforeDraw();
    function afterDraw();
}
</code></pre><br>
\IMooc\ColorDrawDecorator.php<br>
<pre><code class="php">// 颜色填充装饰器
class ColorDrawDecorator implements DrawDecorator{
    protected $color;
    function __construct($color = 'red') {
        $this-&gt;color = $color;
    }

    function beforeDraw() {
        echo "&lt;div style = 'color:{$this-&gt;color};'&gt;";
    }

    function afterDraw() {
        echo "&lt;/div&gt;";
    }
}
</code></pre><br>
\IMooc\SizeDrawDecorator.php<br>
<pre><code class="php">// 尺寸装饰器
class SizeDrawDecorator implements DrawDecorator{
    protected $size;
    function __construct($size = '14px') {
        $this-&gt;size = $size;
    }

    function beforeDraw() {
        echo "&lt;div style = 'size:{$this-&gt;size};'&gt;";
    }

    function afterDraw() {
        echo "&lt;/div&gt;";
    }
}
</code></pre><p></p>
<p>\IMooc\Canvas.php<br>
</p><pre><code class="php">    protected $decorators = array(); 

    // 渲染输出
    function draw() {
        // 前置调用
        $this-&gt;beforeDraw();
        foreach($this-&gt;data as $line){
            foreach ($line as $char) {
                echo $char;
            }
            echo "&lt;br/&gt;\n";
        }
        // 后置调用
        $this-&gt;afterDraw();
    }

    // 添加装饰器
    function addDecorator(DrawDecorator $decorator) {
        $this-&gt;decorators[] = $decorator;
    }

    // 渲染画布前调用装饰器方法
    function beforeDraw() {
        foreach ($this-&gt;decorators as $decorator) {
            $decorator-&gt;beforeDraw();
        }
    }

    // 渲染画布后调用装饰器方法
    function afterDraw() {
        // 后进先出
        $decorators = array_reverse($this-&gt;decorators);
        foreach ($decorators as $decorator) {
            $decorator-&gt;afterDraw();
        }
    }
</code></pre><p></p>
<h2 id="_26"><a name="user-content-_26" href="#_26" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="10">迭代器模式</font></h2>
<h3 id="_27"><a name="user-content-_27" href="#_27" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="10-1">简介</font></h3>
<ul>
<li>迭代器模式，在不需要了解内部实现的前提下，遍历一个聚合对象的内部元素。</li>
<li>相对于传统的编程模式，迭代器模式可以隐藏遍历元素的所需的操作。</li>
</ul>
<h3 id="_28"><a name="user-content-_28" href="#_28" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="10-2">实现和使用</font></h3>
<p>\IMooc\AllUser.php<br>
</p><pre><code class="php">namespace IMooc;

// 继承PHP标准库，实现这五个方法
class AllUser implements \Iterator{

    protected $ids; // 所有Userid
    protected $data = array(); // 数据库对象
    protected $index; // 迭代器当前位置

    function __construct() {
        $db = Factory::createDatabase();
        $result = $db-&gt;query('select id from user');
        $this-&gt;ids = $result-&gt;fetch_all(MYSQLI_ASSOC);
    }

    // 获取当前数据
    function current() {
        $id = $this-&gt;ids[$this-&gt;index]['id'];
        return Factory::getUser($id);
    }

    // 指针向下移动
    function next() {
        $this-&gt;index ++;
    }

    // 判断是否有下个元素
    function valid() {
        return $this-&gt;index &lt; count($this-&gt;ids);
    }

    // 指针重置
    function rewind() {
        $this-&gt;index = 0;
    }

    // 获取当前索引
    function key() {
        return $this-&gt;index;
    }
}
</code></pre><br>
\index.php<br>
<pre><code class="php">$users = new \IMooc\AllUser();
foreach ($users as $user) {
    var_dump($user-&gt;name);
    // 修改数据对象字段的数据
    $user-&gt;serial_no = rand(10000, 99999);
}
</code></pre><p></p>
<h2 id="_29"><a name="user-content-_29" href="#_29" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="11">代理模式</font></h2>
<h3 id="_30"><a name="user-content-_30" href="#_30" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="11-1">简介</font></h3>
<ul>
<li>在客户端与实体之间建立一个代理对象（proxy），客户端对实体进行操作全部委派给代理对象，隐藏实体的具体实现细节。</li>
<li>Proxy还可以与业务代码分离，部署到另外的服务器。业务代码中通过RPC来委派任务。</li>
</ul>
<h3 id="_31"><a name="user-content-_31" href="#_31" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a><font id="11-2">实现和使用</font></h3>
<p>\index.php<br>
</p><pre><code class="php">
// 传统方法手动选择从主库，需要理解业务代码
$db = \IMooc\Factory::createDatabase('slave');
$info = $db-&gt;query('select name from user where id = 1 limit 1');

$db1 = \IMooc\Factory::createDatabase('master');
$db1-&gt;query('update user set name = 'lili' where id = 1 limit 1');

// 操作数据库委派给代理对象
$proxy = new \IMooc\Proxy();
$proxy-&gt;getUserName($id);
$proxy-&gt;setUserName($id, $proxy);
</code></pre><br>
\IMooc\Proxy.php<br>
<pre><code class="php">namespace \IMooc;

class Proxy implements IUserProxy{

    function getUserName($id){
        $db = \IMooc\Factory::createDatabase('slave');
        $info = $db-&gt;query('select name from user where id = {$id} limit 1');
    }

    function setUserName($id, $name){
        $db1 = \IMooc\Factory::createDatabase('master');
        $db1-&gt;query('update user set name = '{$name}' where id = {$id} limit 1');
    }
}
</code></pre><br>
\IMooc\IUserProxy.php<br>
<pre><code class="php">namespace \IMooc;

interface IUserProxy{
    function getUserName($id);
    function setUserName($id, $name);
}
</code></pre><p></p>
<h2 id="_32"><a name="user-content-_32" href="#_32" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>综合实战</h2>
<h3 id="_33"><a name="user-content-_33" href="#_33" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>（一）面向对象设计基本原则</h3>
<p>1.单一职责：一个类，只需要做好一件事情，复杂功能拆分成更细更小的类。<br>
2.开放封闭：一个类，可扩展的（开放，通过扩展增加功能），而不可修改的（封闭）。<br>
3.依赖倒置：一个类，不应该强依赖另外一个类（B依赖注入到A类，B可替换切换）。<br>
4.配置化：尽可能地使用配置，而不是硬编码。<br>
5.面向接口编程：只需要关心接口，不需要关心实现。</p>
<h3 id="mvc"><a name="user-content-mvc" href="#mvc" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>（二）MVC结构（工程组织结构）</h3>
<p><strong> 模型-视图-控制器，一种C/S或B/S软件工程的组织方式 </strong>（非设计模式）<br>
1.模型（Model）：数据和存储的封装<br>
2.视图（View）：展现层的封装，如Web系统中的模版文件<br>
3.控制器（Controller）：逻辑层的封装</p>
<h3 id="_34"><a name="user-content-_34" href="#_34" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>（三）自动加载配置</h3>
<p><strong> PHP中使用ArrayAccess实现配置文件的加载 </strong></p>
<p>\index.php<br>
</p><pre><code class="php">// 通过配置文件类实现自动加载
$config = new \IMooc\Config(__DIR__ . '/configs');
var_dump($config['controller']);
</code></pre><br>
IMooc\Config.php<br>
<pre><code class="php">// 继承PHP标准类库接口，访问对象变成访问数组
class Config implements \ArrayAccess{

    protected $path;
    protected $configs = array();  // 保存加载过的配置

    function __construct($path) {
        $this-&gt;path = str_replace('\\', '/', $path);
    }

    // 获取数组的key
    function offsetGet($key) {
        if(empty($this-&gt;configs[$key])){
            $file_path = $this-&gt;path . '/' . $key . '.php';
            $config = require $file_path;
            $this-&gt;configs[$key] = $config;
        }
        return $this-&gt;configs[$key];
    }

    // 设置数组的key
    function offsetSet($key, $value) {
        throw new \Exception("cannot write config file.");
    }

    // 检测数组key是否存在
    function offsetExists($key) {
        return isset($this-&gt;configs[$key]);
    }

    // 删除数组的key
    function offsetUnset($key) {}
}
</code></pre><br>
\configs\controller.php<br>
<pre><code class="php">return array(
    'home' =&gt; array(
        'decorator' =&gt; array(
            'IMooc/Decorator/Template'
        ),
    ),
    'default' =&gt; 'hello world!'
);
</code></pre><p></p>
<h3 id="_35"><a name="user-content-_35" href="#_35" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>（四）从配置中生成数据库连接</h3>
<p><strong>在工厂方法中读取配置，生成可配置化的对象</strong><br>
\configs\database.php<br>
</p><pre><code class="php">return array(
    'master' =&gt; array(
        'type' =&gt; 'MySQL',
        'host' =&gt; '127.0.0.1',
        'user' =&gt; 'root',
        'password' =&gt; 'root',
        'dbname' =&gt; 'test'
    ),
    'slave' =&gt; array(
        'slave1' =&gt; array(
            'type' =&gt; 'MySQL',
            'host' =&gt; '127.0.0.1',
            'user' =&gt; 'root',
            'password' =&gt; 'root',
            'dbname' =&gt; 'test'
        ),
        'slave2' =&gt; array(
            'type' =&gt; 'MySQL',
            'host' =&gt; '127.0.0.1',
            'user' =&gt; 'root',
            'password' =&gt; 'root',
            'dbname' =&gt; 'test'
        ),
    ),
);
</code></pre><br>
\IMooc\Factory.php<br>
<pre><code class="php">static function createDatabase($id = 'master') {

    if($id == 'slave') {
        $slaves = Application::getInstance-&gt;config['database']['slave'];
        $db_conf = $slaves[array_rand($slaves)];// 随机取一个从数据库配置
    } else {
        $db_conf = Application::getInstance()-&gt;config['database'][$id];
    }

    // 注册到树上
    $key = 'database_' . $id;
    $db = Register::get($key);
    if(!$db) {
        $db = new Database\MySQLi();
        $db-&gt;connect($db_conf['host'], $db_conf['user'], $db_conf['password']);
        Register::set($key, $db);
    }
    return $db;
}
</code></pre><br>
\IMooc\Application.php<br>
<pre><code class="php">namespace IMooc;

class Application{
    public $base_dir;
    protected static $instance;

    public $config;

    protected function  __construct($base_dir) {
        $base_dir = str_replace(''\\'', ''/'', $base_dir);
        $this-&gt;base_dir = $base_dir;
        $this-&gt;config = new Config($base_dir . '/configs');
    }

    // 工厂单例
    static function getInstance($base_dir = '') {
        if(empty(self::$instance)){
            self::$instance = new self($base_dir);
        }
        reutrn self::$instance;
    }
}
</code></pre><br>
\index.php<br>
<pre><code class="php">$db = \IMooc\Factory::createDatabase();
</code></pre><p></p>
<h3 id="mvc_1"><a name="user-content-mvc_1" href="#mvc_1" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>（五）装饰器模式在MVC中的使用</h3>
<p><strong>使用装饰器模式实现权限验证，模版渲染，JSON串化</strong></p>
<p>\configs\controller.php<br>
</p><pre><code class="php">return array(

    // Home控制器
    'Home' =&gt; array(
        'decorator' =&gt; array(
            'App\Decorator\Login',
            'App\Decorator\Template',
            'App\Decorator\Json'
        ),
    ),
);
</code></pre><br>
\IMooc\Application.php<br>
<pre><code class="php">// 调度
function dispatch() {

    // 获取控制器和方法名
    $uri = $_SERVER['SCRIPT_NAME'];
    list($c, $v) = explode('/', trim($uri, '/'));

    $c_low = strtolower($c); // 全部小写
    $c = ucwords($c); // 首字母大写

    $class = '\\App\\Controller\\' . $c; // 拼接控制器命名空间
    $obj = new $class($c, $v); // 实例化控制器

    // 获取配置信息
    $controller_config = $this-&gt;config['controller'];
    $decorators = array();

    // 是否配置装饰器
    $conf_decorator = $controller_config[$c_low]['decorator'];
    if(isset($conf_decorator)) {
        foreach($conf_decorator as $class) {
            $decorators[] = new $class;
        }
    }

    // 开始执行装饰器前置
    foreach ($decorators as $decorator) {
        $decorator-&gt;beforeRequest($obj);
    }

    // 执行用户事件
    $return_value = $obj-&gt;$v();

    // 开始执行装饰器后置 
    foreach ($decorators as $decorator) {
        $decorator-&gt;afterRequest($return_value);
    }
}
</code></pre><br>
\IMooc\Controller.php<br>
<pre><code class="php">namespace IMooc;

abstract class Controller{

    protected $data;
    protected $controller_name;
    protected $view_name;
    protected $template_dir;

    // 初始化控制器名、事件名、模板目录
    function __construct($controller_name, $view_name) {
        $this-&gt;controller_name = $controller_name;
        $this-&gt;view_name = $view_name;
        $this-&gt;template_dir = Application::getInstance()-&gt;base_dir . '/templates';
    }

    // 模板变量赋值
    function assign($key, $value) {
        $this-&gt;data[$key] = $value;
    }

    // 加载模板文件，并将变量注册到模板中
    function display($file = '') {
        if(empty($file)) { 
            $file = strtolower($this-&gt;controller_name) . '/' . $this-&gt;view_name . '.php';
        }
        $path = $this-&gt;template_dir . '/' . $file;
        extract($this-&gt;data);
        include $path;
    }
}
</code></pre><br>
\App\Decorator\Login.php<br>
<pre><code class="php">// 登录装饰器
class Login{
    function beforRequest($controller) {

        // 验证是否登录
        session_start();
        if(empty($_SESSION['isLogin'])){
            $url = $_SERVER['SCRIPT_NAME'];
            header("Location:/login/index");
            exit;
        }
    }

    function afterRequest($return_value) {}
}
</code></pre><br>
\App\Decorator\Json.php<br>
<pre><code class="php">// Json装饰器
class Json{
    function beforRequest($controller) {}

    function afterRequest($return_value) {
        if($_GET['format'] == 'json') {
            echo json_encode($return_value);
        }
    }
}
</code></pre><br>
\App\Decorator\Template.php<br>
<pre><code class="php">// 模板装饰器
class Template{

    protected $controller;

    function beforRequest($controller) {
        $this-&gt;controller = $controller;    
    }

    function afterRequest($return_value) {
        if($_GET['format'] == 'html') {
            foreach($return_value as $k =&gt; $v) {
                $this-&gt;controller-&gt;assign($k, $v);
            }
            $this-&gt;controller-&gt;display();
        }
    }
}
</code></pre><br>
\App\Controller\Home.php<br>
<pre><code class="php">namespace App\Controller;

// 使用命名空间
use IMooc\Controller;
use IMooc\Factory;

class Home extends Controller{
    function index() {
        // 使用装饰器，直接return
        return array('userid' =&gt; 1, 'name' =&gt; 'rango');
    }
}
</code></pre><br>
\IMooc\Factroy.php<br>
<pre><code class="php">
// 获取模型
static function getModel($name) {
    $key = 'app_model_' . $name;
    $model = Register::get($key);
    if(empty($model)) {
        $class = '\\App\\Model\\' . ucwords($name);
        $model = new $class;
        Register::set($key, $model);
    }
    return $model;
}
</code></pre><p></p>
<p>\index.php<br>
</p><pre><code class="php">\IMooc\Application::getInstance(__DIR__)-&gt;dispatch();
</code></pre><p></p>
<h3 id="mvc_2"><a name="user-content-mvc_2" href="#mvc_2" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>（六）观察者模式在MVC中的使用</h3>
<p><strong>使用观察者模式实现数据更新时的一系列更新操作</strong></p>
<p>\App\Controller\Home.php<br>
</p><pre><code class="php">function index() {
    $model = Factory::getModel('User');
    $userid = $model-&gt;create(array('name' =&gt; 'rango', 'mobile' =&gt; 13417592837));

    // 使用装饰器，直接return
    return array('userid' =&gt; $userid, 'name' =&gt; 'rango');
}
</code></pre><br>
\App\Model\User.php<br>
<pre><code class="php">namespace App\Model;

use IMooc\Factroy;

 // 用户模型
class User extends \IMooc\Model {
    function create($user) {
        $userid = 1;
        $this-&gt;notify($user);
        return $userid;
    }
}
</code></pre><br>
\IMooc\Model.php<br>
<pre><code class="php">namespace IMooc;

class Model {
    protected $observers = array();

    function __construct() {
        // 获取当前模型名称
        $name = strtolower(str_replace('App\Model\\', '', get_class($this)));
        $observers = Application::getInstance()-&gt;config['model'][$name]['observer'];

        // 添加观察者
        if(!empty($observers)) {
            foreach ($observers as $class) {
                $observers[] = new $class;
            }
        }
    }

    // 通知观察者
    function notify($event) {
        foreach ($this-&gt;observers as $observer) {
            $observer-&gt;update($event);
        }
    }
}
</code></pre><br>
\configs\Model.php<br>
<pre><code class="php">// 通过配置添加观察者
return array(
    'user' =&gt; array(
        'observer' =&gt; array(
            'App\Observer\UserAdd1',
            'App\Observer\UserAdd2',
            'App\Observer\UserAdd3',
        )
    )
);
</code></pre><br>
\App\Observer\UserAdd1.php<br>
<pre><code class="php">namespace App\Observer;

class UserAdd1
{
    function update($id)
    {
        echo "分配工位&lt;br/&gt;";
    }
}
</code></pre><br>
\App\Observer\UserAdd2.php<br>
<pre><code class="php">namespace App\Observer;

class UserAdd2
{
    function update($id)
    {
        echo "注册社保&lt;br/&gt;";
    }
}
</code></pre><br>
\App\Observer\UserAdd3.php<br>
<pre><code class="php">namespace App\Observer;

class UserAdd3
{
    function update($id)
    {
        echo "分配电脑&lt;br/&gt;";
    }
}
</code></pre><p></p>
<h3 id="mvc_3"><a name="user-content-mvc_3" href="#mvc_3" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>（七）代理模式在MVC中的使用</h3>
<p><strong>使用代理模式实现数据库的主从自动切换</strong></p>
<p>\App\Controller\Home.php<br>
</p><pre><code class="php">function index2() {

    // 代理对象会自动调用主从服务器
    $db = Factory::createDatabase();
    $db-&gt;query("select * from user");
    $db-&gt;query("delete from user where id = 1");
    $db-&gt;query("update user set name = 'rango' where id = 1");
}
</code></pre><br>
\IMooc\Factory.php<br>
<pre><code class="php">protected static $proxy;

static function createDatabase($id = 'proxy') {

    // 默认将数据库操作委派给代理对象
    if($id == 'proxy') {
        if(empty(self::$proxy)) {
            self::$proxy = new \IMooc\Database\Proxy;
        }
        return self::$proxy;
    }

    if($id == 'slave') {
        $slaves = Application::getInstance-&gt;config['database']['slave'];
        $db_conf = $slaves[array_rand($slaves)];// 随机取一个从数据库配置
    } else {
        $db_conf = Application::getInstance()-&gt;config['database'][$id];
    }

    // 注册到树上
    $key = 'database_' . $id;
    $db = Register::get($key);
    if(!$db) {
        $db = new Database\MySQLi();
        $db-&gt;connect($db_conf['host'], $db_conf['user'], $db_conf['password']);
        Register::set($key, $db);
    }
    return $db;
}
</code></pre><br>
\IMooc\Database\Proxy.php<br>
<pre><code class="php">namespace IMooc\Database;
use IMooc\Factory;

class Proxy{
    function query($sql) {
        if(substr($sql, 0, 6) == 'select') {
            echo "读操作：$sql&lt;br /&gt;";
            return Factory::createDatabase('slave')-&gt;query($sql);
        } else {
            echo "写操作：$sql&lt;br /&gt;";
            return Factory::createDatabase('master')-&gt;query($sql);
        }
    }
} 
</code></pre><p></p></article></body></html>