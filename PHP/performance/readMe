# 高性能产品的必由之路-性能测试工具
[TOC]
## 第一章.背景介绍
### 1-1.性能测试背景介绍

* 搭建网站容易，美观漂亮需要UI,UE,UR，交互交给前端。
* 搭建千万级用户网站，不是没有人都有能力，此级别为架构师。
    - 横向扩展能力，如淘宝日常为正常级别访问量，双11比日常多几百倍用户同一时间涌进来。日常1千台，双11就5千台。根据用户不同的访问习惯增加或减少机器的数量，淘宝至少准备5千台机器，后来出现了阿里云将剩余服务器供给其他网站使用，资源的冗余合理利用。
    - 数据库优化，一台数据库不可能瞬间承载十万、百万同时访问，mysql一般会集群，读写分离，调优sql语句，sql语句简洁清晰，使用索引等。
    - 让一台机器能够承载更多的用户请求，服务器承载从原来5千提升到2万访问量，机器数量马上由5千台降到5百台，成本极大降低。不仅提高用户体验，同时降低公司的运营成本，技术实力也有极大提升，个人价值得到极大提升。如果做过百万千万级网站，应聘其他公司非常容易拿到CTO级别的岗位。尤其移动互联网，H5的手机App能同时为所有操作系统（IOS，android）服务。

## 第二章.性能测试概要
### 2-1.课程介绍

* 性能测试概要
* 性能测试相关工具介绍
* 被测系统介绍
* 使用Jmeter进行性能测试
* 产品性能分析
* 其他性能监控软件介绍

### 2-2.关于性能测试案例
1.**12306中国铁路客户服务中心**

* 开始上线，网站瞬间宕机，设计容量跟实际容量完全不一样，日常百万级，春运期间突然之间2千万用户涌进去。开始花了几亿做出这个网站，出问题之后又花了几亿对网站的性能进行优化。体验现在还是不好，得排队买票。

2.**北京奥运会订票系统**

* 因为后台处理能力不足，网站宕机了。性能更新后，浏览量达到每小时8百万次，每秒的申购量高达20万次，大大超出了每小时100万次浏览量的承受能力。性能和横向扩展没有做好。

3.**淘宝**

* 传奇，双11应付这么大的订单量。12306网站是每个人都会刷余票量。淘宝是分散开每个网店分每个网店，所以相比之下，整体业务情况及形态不相同，12306真正做好是不容易的事情。做发开时需要考虑，性能优化是一件需要雕琢的事情不能着急。需要对性能的情况及表现对自己的系统进行调优，慢慢的产品就能承载百万千万级的用户了，整个过程不是一蹴而就。

### 2-3.性能的关键指标介绍

* 什么是性能测试
    - 通过技术手段模拟大量用户同时访问北侧应用，观察、记录和分析系统的各项性能指标的过程。（模拟大量并发用户）
    - 性能测试的目标是评估系统的性能瓶颈，预测系统的最大用户负载能力。（监控系统负载参数分析系统瓶颈）
* 平均响应时间（TTLB, Time to laster byte）
    - 平均每个请求从发送到接收响应的时间
* 合理的平均响应时间
    - 2/5/10原则
    - 在2秒之内给客户响应被用户认为是“非常有吸引力”的用户体验。在5秒之内响应客户被认为“比较不错”的用户体验，在10秒内给用户响应被认为“糟糕”的用户体验。如果超过10秒还没有得到响应，那么大多用户会认为这次请求是失败的。
* 平均响应时间的业务影响
    - 根据2008年Aberdeen Grooup的研究报告，对于Web网站，1秒的页面加载延迟相当于少了11%的PV（page view），相当于降低了16%的顾客满意度。
    - Compuware公司分析了超过150个网站和150万个浏览页面，发现页面响应时间从2秒增长到10秒，会导致38%的页面浏览放弃率。
* CPU
    - CPU占用率
* 内存
    - 内存的占用率，换页数等
* I/O
    - 读写请求数，读写量等，mysql数据存储在硬盘中，瓶颈在I/O。
* 宽带
    - 进站出战宽带占用率

### 2-4.为什么要进行性能测试

* 能够有效评估系统的性能指标，用于系统的性能评估
* 能够识别系统的性能瓶颈，协助性能调优
* 能够知道突发流量承载方案的制定
* 能够用于系统运维成本的预算

### 2-5.性能测试分类

* 负载测试（Load Test）
    - 为了验证系统设计符合正常业务负载情况下系统性能表现的测试，明确性能指标，一百万用户响应时间希望在2秒钟之内。查看各个性能指标如带宽、CPU、内存利用率，请求响应时间是否符合设计要求。
* 压力测试（Stress Test）
    - 为了验证系统在极端负载情况下的性能表现的测试

**开发人员进行的性能测试更加关注在一定负载情况下各个系统资源的占用率，从而找到内存泄漏、连接泄漏和系统的性能瓶颈。**
### 2-6.性能测试工具

* JMeter
    - Apache组织开发的性能测试工具
    - 特性
        + Web - HTTP，HTTPS
        + SOAP
        + FTP
        + LDAP
        + Message-oriented middleware （MOM）via JMS
        + MongoDB（NoSQL）
        + TCP
        + Others

## 第三章.PHP自身性能优化

* 注意语法，多用PHP内置变量、常量、函数（PHP代码分析解析成opcode，少了分析节省了很多时间）
* 分析不同内置函数的时间复杂度（取最优）
* 少用魔术函数（只会懒人提供方便，但实际很耗性能）
* 使用unset()释放不必要的内存
* 尽量少使用正则表达式（回溯开销大，使用字符串处理函数）
* 不在循环内做运算如：for（$i = 0; $i < str($a); $i++）
* 减少计算密集型业务（PHP语言特性不适合做大数据量运算，适合衔接Webserver与后端服务，请求交给PHP做参数校验及初始化）
* 务必使用带引号字符串为键值（没有引号的键值会被PHP认为是常量，产生查找常量的开销）

## 第四章.PHP周边性能优化
### 4-1.性能的依赖

* linux运行环境（是否仅仅是phpServer这个很重要）
* 文件存储（硬盘）
* 数据库（性能是否优良）
* 缓存机制（内存条，Nosql）
* 网络带宽介质（如果是phpServer）

### 4-2.性能的优化方向

* 减少文件类操作（开销次序）
    - 内存 < 数据库（内存中写好命令） < 磁盘（大文件） < 网络（出现延迟情况）
* 网络请求的坑
    - 对方接口的不明确因素（无法访问、结果不符合预期）
    - 网络稳定性
* 优化网络请求
    - 设置超时时间（连接超时200ms，读超时800ms，写超时500ms）
    - 将串行请求并行化（curl_mulit_*()函数、swoole扩展）
* 压缩PHP接口输出
    - 使用Gzip（>100K）
        + 利：数据输出，Client客户端能更快获取数据
        + 弊：额外的CPU开销
* 缓存重复计算内容
    - 缓存内容的情况（多次请求，内容不变）
* 重叠时间窗口思想
    - 串行（顺序执行，从前到后）
    - 并行（时间重叠，时间缩短，前提是两道环节任务不强依赖）
* 旁路方案
    - 在串行执行的扩展，在下一个过程分成两路执行（前提是两道环节任务不强依赖）

## 第五章.PHP语言底层性能优化
### 5-1.性能的分析

* XHPort（facebook）：PHP代码执行情况报表
* ab：压力测试
* vld：opcode代码测试

### 5-2.解决性能瓶颈

* Opcode Cache：PHP扩展APC（接近机器代码）
* 扩展实现：通过PHP扩展代替PHP代码中的高频逻辑
* Runtime优化：HHVM（facebook）
